pragma solidity 0.8.16;

import "forge-std/Vm.sol";
import "forge-std/console.sol";
import "forge-std/Test.sol";

import {TelepathyRouter} from "src/amb/TelepathyRouter.sol";
import {UUPSProxy} from "src/libraries/Proxy.sol";

// To run this: FOUNDRY_PROFILE=misc forge test

contract Debug is Test {
    function testDebugGoerli() public {
        string memory GOERLI_RPC_URL = vm.envString("RPC_5");
        vm.createSelectFork(GOERLI_RPC_URL);

        TelepathyRouter deployedRouter = TelepathyRouter(0x68cb68162524661Ae764112726A7e494a0848f23);
        bytes memory data =
            hex"37d5af8400000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001c0d0dfabec66f954acb5640e5c940ba83ab0aead8bccee9d9d5197dc05f5af64e500000000000000000000000000000000000000000000000000000000000005a00000000000000000000000000000000000000000000000000000000000000ae00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000007619c00000000000000000000000000000000000000000000000000000000000760efb000000000000000000000000000000000000000000000000000000000000004601000000000000012100000064e465e2f45ac2f28c158fae23ef9f054610219c5f00000064000000000000000000000000db6d00db359f6f2ff93023f60a4c909d628ab1de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ee321fae66c8f0051e0bf1ef9950b374ce020b6a94ffcd9c9d0012b0ca62ae1ece7ebed4c82fc88da65dfb37d127a4df86fd39b700827d9b8259267cc9b804d10877c0b7c847dfe665608b4758cad3211cd8eae1614d342da6fc12b68a790582f5d2c87c1164954819a38c7f4665048ddb5a2d7e73ee12d792c05cbbb05736bce0000000000000000000000000000000000000000000000000000000000000000f5a5fd42d16a20302798ef6ed309979b43003d2320d9f0e8ea9831a92759fb4bdb56114e00fdd4c1f85c892bf35ac9a89289aaecb1ebd0a96cde606a748b5d71c759483432122a9c09422ba7979e5bf6044491887df2b192734af771513a88cdcceb36bebe730215da9fd61e087f633a7ebf504352d9e3e6a30990f756113adec9937ff2c5bb913172151f0477c96cbffc4ed7ca9c2de1553fa2f8c3fe8649e2c23e4b63c61a69e282494fe656abc1befbcdbf910c5f32a0cee05203da05ca853e9424e9f17c677f8acb3f14347c36af3373133710b781f42c253a7c7c1235ad7a17cc5395957c708ebefbdf7c758d1b1343638570e4e4170d9c5f9d67ad7757ab0bfceb7c87c56a3288bda12760e2ba6c98ae630d8382101e93708852aed19151f1c8d6d240f8c5c47842169f64cfc197bb8bd735117cf084e5e78dd60f0fefbf62d98d48f3c0ddf3c4bf65fb9076a2e8b093b2dc35f536f68e8695470be19efdce139fe13312a19e94b09ffae05875d9340e7a0771dab793b8ec36178de4a55ae24b39556bf1fe431bde64c376f6b95a7ee679749d40dd53287d5a1e5c5670a0b50302b88070d2f30b297e79721e6f690e23010bf827174aa00adc0b3b8848cb3df51bb40424345d60b7a548b890908ed2f8114bd1cbb3404ea39dd93de0c302aa13c050a07433a2aa96cdb147582f7a4ef05f781fd911584a24b3b8e207e07a4ffa4a2902c58aea7f7430c77ca08a012345f47e2cc43434dbdc2665c98440ae5c48f68169a797ba964abe0b96a522f740d26390905cb4181d252f030b4c95e7e430e0476788afcc1be18d9a7f4ae236b4afe19f8bb67ab5ee3adcf38b3897b237f4f2e3ddea5bb8302e8718945071842a8b724b7548aaa3d2301d8d099ef1d7b2cc8b6b2268f2c1b0f0537673d85e8ae90351f4e107aca21201094498734414167c596066936692495032c4ba063923347526299f6be688f2d14c75e700268022508b9504c15b9184f3dc2da7cc469d7e986fa982afdf8ba7aafe7cc8529b20c65f30c832e29a3bd137c81b3a3ec112cfc7e2e4e871f1f510587392ecc8b9aa4c5d7bbc4548ad6c3274dcde54bcdf55ba1076766da35d2d1ae0598fc72ec80000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000002c00000000000000000000000000000000000000000000000000000000000000053f851a069aca3311d604ea758ccbcbaf61706d20332b15c6eca16e2df7fc6bc8ccaf82080808080808080a00bc2ef26e57dff09074bce5c394d99507db39f6f42e678d9e5bb4da9349a4f2a80808080808080800000000000000000000000000000000000000000000000000000000000000000000000000000000000000001b4f901b180a0cd7b2cc82de195d16e9da6b153959fc22415c9a992cd6a2a1efe55cc34131dbda0ad1efda3e98cd9e347d069cf428e3f3d134e6eba4b34fd749704d5186dc58a84a0d976fd8b8bba6f521e27998ce7e8779dbcd974b74d6955d6898d2d2eac6206fba0b0b31b840de800b91ead660ef6b0a6d869bb22e66f90fc0f24794e1b937d2046a0101ee66c8d329c6ee66fb2a411d67af3f67ed93775e974116a9fe3e577b16154a0151c0c59c11e5cc779b6ca9690cee5dbeb9ecaf67629b45209d3ef04dc85ea77a04bf3476bb0539ff5733ebe98b0dd69be042abde8d79ca429d69f84cc77ad5f2ba082cd409943dbf41121a6905794439ee1ffe3b44bd79efca388cb9680e2648e3fa0a5baab1757c705d5dc9d50d4efe9c3eb70f3c4ac7f673f543f94c0aafb0bf842a0dcff7ae3f5d09696d74f4e84fbec5a86e7cf4ebd8d27a49d98884a815029ae18a0dc48097b3083d77103648179f5cdbeca8b66d01c380b7becdf6a6f68f55bcd94a057780fb0f600a26dc5bd47204fa8198657b0ca9bff8ba074e73f78991b8ca2d0a0206ce1266c8b459c25af753defb7fbeb173c2f2df5938e4c9186176f920aec048080800000000000000000000000000000000000000000000000000000000000000000000000000000000000000235f9023220b9022e02f9022a018313512ebf9011ff9011c9468cb68162524661ae764112726a7e494a0848f23f863a0e5944a34d67c652e0ebf2304b48432aae0b55e40f79ba8a21a4d7054c169ffaca00000000000000000000000000000000000000000000000000000000000000121a0274c4cd7a1239571f8eb98d3cef5834fa3c87a9ab9177afbbecbdd6e2dd3c0afb8a00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004601000000000000012100000064e465e2f45ac2f28c158fae23ef9f054610219c5f00000064000000000000000000000000db6d00db359f6f2ff93023f60a4c909d628ab1de000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010d00000000000000000000000000000000000000000000000000000000000000";
        // address(router).call(data);

        TelepathyRouter routerImpl = new TelepathyRouter();
        UUPSProxy proxy = new UUPSProxy(address(routerImpl), "");
        TelepathyRouter router = TelepathyRouter(address(proxy));

        uint256 len = deployedRouter.sourceChainIdsLength();
        uint32[] memory sourceChainIds = new uint32[](len);
        address[] memory lightClients = new address[](len);
        address[] memory broadcasters = new address[](len);
        for (uint256 i = 0; i < len; i++) {
            uint32 sourceChainId = deployedRouter.sourceChainIds(i);
            sourceChainIds[i] = sourceChainId;
            lightClients[i] = address(deployedRouter.lightClients(sourceChainId));
            broadcasters[i] = deployedRouter.broadcasters(sourceChainId);
        }
        router.initialize(sourceChainIds, lightClients, broadcasters, address(0), address(0), true);

        address(router).call(data);
    }
}
